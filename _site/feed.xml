<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-16T01:26:37+05:30</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Designing a contextual chatbot in Telegram using Python, Github &amp;amp; Heroku</title><link href="http://localhost:4000/2020/04/10/designing-contextual-chatbots-in-telegram-using-python-github-heroku.html" rel="alternate" type="text/html" title="Designing a contextual chatbot in Telegram using Python, Github &amp; Heroku" /><published>2020-04-10T00:00:00+05:30</published><updated>2020-04-10T00:00:00+05:30</updated><id>http://localhost:4000/2020/04/10/designing-contextual-chatbots-in-telegram-using-python-github-heroku</id><content type="html" xml:base="http://localhost:4000/2020/04/10/designing-contextual-chatbots-in-telegram-using-python-github-heroku.html">&lt;p&gt;Telegram bots are third-party applications that run inside the application. Users can interact with bots by sending them messages, commands and inline requests. Contextual chatbots are a category bots that communicate only through inline requests. They are contextual since they maintain a context and the users can only navigate the pre-defined context. These are especially useful in providing customer service. In this post, we will look at how to design such bots in Telegram using Python.&lt;/p&gt;

&lt;p&gt;This will consist of two parts. In the first part, we will register our bot with Telegram, set up our local coding environment and write the code for the bot. In the second part, we will discuss how to host the bot on Heroku which is cloud-based service useful for hosting small web-based applications.&lt;/p&gt;

&lt;h3 id=&quot;registering-a-new-bot-withtelegram&quot;&gt;Registering a new bot with Telegram&lt;/h3&gt;

&lt;p&gt;To register a new bot go to the Telegram app on your phone and follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the search bar search for the “BotFather”. “BotFather” is a bot that will assist you in creating and managing all your bots&lt;/li&gt;
  &lt;li&gt;Start BotFather and type /help. This brings up all the possible commands that this bot can handle&lt;/li&gt;
  &lt;li&gt;Type /newbot or click on this command from this list&lt;/li&gt;
  &lt;li&gt;Follow the instructions for setting up a new bot which is basically choosing a name and username for your bot. [Tip: Pick a username which is relevant to what your bot can do]&lt;/li&gt;
  &lt;li&gt;Once the bot is successfully created the BotFather will return a token to access HTTP API. Save this token securely with you. We will be using this token to authorize our bot from within the python script&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;setting-up-a-new-python-virtual-environment&quot;&gt;Setting up a new Python virtual environment&lt;/h3&gt;

&lt;p&gt;It is good practice to create virtual environments for python projects. A virtual environment helps to keep dependencies required by different projects separate. A virtual environment also helps to easily create a &lt;em&gt;requirements.txt&lt;/em&gt; file, which is used by Heroku to create its python environment in the cloud.&lt;/p&gt;

&lt;p&gt;While there are few choices for virtual environment tools, we will be using virtualenv for our project. Follow these steps to create a Python virtual environment using virtualenv&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open your terminal in macOS or Linux and create a new project directory &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir telegram-bot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;cd into the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;cd telegram-bot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;check that virtualenv is installed in your system by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv -v&lt;/code&gt;. If virtualenv is installed this command will return the installation path. If it is not installed you can install it using the methods mentioned in this &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/installation.html&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;create a new virtual environment and activate it&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtualenv venv
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While you can use any name for your environment, venv is a convention that is commonly used. Once the environment is active proceed to install the required python packages for the project&lt;/p&gt;

&lt;p&gt;We will be using the &lt;a href=&quot;https://github.com/python-telegram-bot/python-telegram-bot&quot;&gt;python-telegram-bot&lt;/a&gt; library for this project. This library provides a pure Python interface for the &lt;a href=&quot;https://core.telegram.org/bots/api&quot;&gt;Telegram Bot API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install it by running &lt;code class=&quot;highlighter-rouge&quot;&gt;python -m pip install -U python-telegram-bot&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;initialising-a-git-repository-in-the-projectfolder&quot;&gt;Initialising a Git repository in the project folder&lt;/h3&gt;

&lt;p&gt;A git repository needs to be initialised in the project folder as Heroku uses a local git repository to deploy the code in their cloud service. While typically the Heroku remote is added to the local git repository to push the commit, for this project we will add a remote from Github, and further connect the Github repository to the Heroku app.&lt;/p&gt;

&lt;p&gt;To initialise a local git repository, in your project folder run &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, create a .gitignore file by running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;touch .gitignore&lt;/code&gt;
The .gitignore file lists the name of those files that should be ignored from all commits which will be updated later.&lt;/p&gt;

&lt;p&gt;Now we will be creating a new repository in Github. Visit your Github account and create a new repository. You can either make the repository public or private. We will assume that the name of Github repository you have created is the same as your project folder. Once the repository is created copy its URL.&lt;/p&gt;

&lt;p&gt;Now we need to connect our local repository with our newly created Github repository.
Connect your local repository to the newly created Github repo by running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin URL-to-your-Github-repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the connection to the remote repository has been established run &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin master&lt;/code&gt;. This will update the local repository with the README file and now we can push commits to the Github repo.&lt;/p&gt;

&lt;h3 id=&quot;writing-the-pythonapp&quot;&gt;Writing the Python app&lt;/h3&gt;

&lt;p&gt;Hurray! Now we can finally start writing the Python script for the bot. This bot will have a very simple design. There is this very famous scikit-learn &lt;a href=&quot;https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html&quot;&gt;machine learning map&lt;/a&gt; available which can help data scientists decide on which estimator to try depending on the data. While the original map is extensive for this tutorial we only adapt the classification segment (other segments are clustering, regression and dimensionality reduction).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/classification.png&quot; alt=&quot;&quot; class=&quot;center-image img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script given its size is impossible to host here completely. Please click on this &lt;a href=&quot;https://gist.github.com/escapist21/52346423fdeb0b1c49d6ccbb66a9cfe2&quot;&gt;link&lt;/a&gt; to access the Github gist for this code.&lt;/p&gt;

&lt;p&gt;Create a new file in your project folder named by running &lt;code class=&quot;highlighter-rouge&quot;&gt;touch telegram_bot.py&lt;/code&gt; , open it with your favorite code editor and paste the code from the above link in this file.&lt;/p&gt;

&lt;h3 id=&quot;explaining-thecode&quot;&gt;Explaining the code&lt;/h3&gt;

&lt;p&gt;Here we will look at parts of the code and try to understand what is happening&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;telegram.ext&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackQueryHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConversationHandler&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;telegram&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InlineKeyboardButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InlineKeyboardMarkup&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we import the necessary classes from the python-telegram-bot library. The first line imports the various handlers that will be required for this program. You are requested to read up about what these handlers do. The second line imports the modules associated with creating the inline keyboard. Since this is a contextual chatbot, only the inline keyboards will be used to communicate with the bot.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/bot_screenshot.jpeg&quot; alt=&quot;the bot with the inline keyboard markup&quot; class=&quot;center-image img-responsive&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;the bot with the inline keyboard markup&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# States  
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECOND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Callback data  
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TWO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOUR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“States” is a list of all conversation steps that will be later used in setting up the &lt;em&gt;ConversationHandler&lt;/em&gt;. “Callback data” is a list of callbacks that are returned from the inline keyboard upon pressing on it. The “States” along with the “Callback data” will be returned from various functions that will form our conversation logic. Here we just initialize these variables for later use.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Build inline keyboard  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;keyboard1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InlineKeyboardButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;100K samples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;keyboard2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InlineKeyboardButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;100K samples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# create reply keyboard markup  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;reply_markup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InlineKeyboardMarkup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyboard1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyboard2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# send message with text and appended inline keyboard  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Hello {}.Let's figure out the best classifer for your data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;How many samples do you have?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply_markup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# tell ConversationHandler that we are in state 'FIRST' now  
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIRST&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Returns 'ConversationHandler.END', which tells the CoversationHandler that the conversation is over&quot;&quot;&quot;&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback_query&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit_message_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;s&quot;&gt;&quot;Goodbye, and all the best&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;If you need my help again click on /start&quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConversationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the start() function is the first function that is called from within the &lt;em&gt;ConversationHandler&lt;/em&gt; that we will define later. It is activated in response to the /start command. Once the &lt;em&gt;ConversationHandler&lt;/em&gt; is activated it uses the “State” and “Callback data” variable returned from each function to control the conversation flow.&lt;/p&gt;

&lt;p&gt;Following the start() function are the other functions that are called as part of the conversation each having a unique inline keyboard, appended message text and returning a “State” and “Callback data”. Refer to the script to study these functions.&lt;/p&gt;

&lt;p&gt;These functions are followed by the end() function. The end function is called when the logic flow within the &lt;em&gt;ConversationHandler&lt;/em&gt; reaches the end of the conversation. It returns the &lt;em&gt;ConversationHandler.END&lt;/em&gt; signal, which effectively terminates the conversation.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;#setting to appropriate values  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;YOUR ACCESS TOKEN&quot;&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# set up updater  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# set up dispatcher  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;#print a message to terminal to log successful start  
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bot started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Set up ConversationHandler with states FIRST and SECOND  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conv_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConversationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallbackQueryHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_svc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;SECOND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallbackQueryHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  
                   &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;fallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# add ConversationHandler to dispatcher  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      
    &lt;span class=&quot;c1&quot;&gt;# start the bot  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_polling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# run the bot until Ctrl+C is pressed  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;Updater&lt;/em&gt; class continuously fetches new updates from Telegram and passes it to the &lt;em&gt;Dispatcher&lt;/em&gt; class. Once the &lt;em&gt;Updater&lt;/em&gt; object is created, it is used to create a &lt;em&gt;Dispatcher&lt;/em&gt; object and they are then linked together in a queue. Different types of Handlers can be registered with the Dispatcher, which then sorts all the updates received from Telegram according to the registered Handlers. For example, here we add a &lt;em&gt;ConversationHandler&lt;/em&gt; to the dispatcher.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ConversationHandler&lt;/em&gt; manages four collections of other handlers. In this example, three such collections are used namely &lt;em&gt;entry_points&lt;/em&gt;, &lt;em&gt;states&lt;/em&gt; and &lt;em&gt;fallbacks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;entry_point&lt;/em&gt; collection is a list used to initiate the conversation. In this example, a &lt;em&gt;CommandHandler&lt;/em&gt; class is used which responds to the ‘start’ command.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;states&lt;/em&gt; collection is a dictionary containing the different conversation steps and one or more associated handlers. In this example, all the conversation steps are associated with &lt;em&gt;CallbackQueryHandler&lt;/em&gt; since all our updates from the app are in the form of callbacks associated with pressing an inline keyboard button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/flowchart.jpeg&quot; alt=&quot;&quot; class=&quot;center-image img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The flowchart is used to design the conversation steps as defined in the &lt;em&gt;states&lt;/em&gt; collection.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;fallbacks&lt;/em&gt; collection is a list that is used if the user currently in conversation returns an update which is not of the expected type. For example, a text update is sent when the expected update was a command. This prevents the bot from breaking.&lt;/p&gt;

&lt;p&gt;Click on this &lt;a href=&quot;https://vimeo.com/405917388&quot;&gt;link&lt;/a&gt; to watch a video of the bot in action&lt;/p&gt;

&lt;p&gt;Run the python file from the terminal &lt;code class=&quot;highlighter-rouge&quot;&gt;python telegram_bot.py&lt;/code&gt; and your bot will spring to life.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-app-in-heroku&quot;&gt;Creating a new app in Heroku&lt;/h3&gt;

&lt;p&gt;Heroku is a cloud application platform that operates as a PaaS (Platform as a Service). It enables developers to build, run and operate applications entirely in the cloud. If you do not have a free Heroku developer account, you can create one by following this link.
Log in to your Heroku account and your app dashboard will be presented to you. The app dashboard showcases all your apps and lets you manage them. To create a new app click on ‘New’ on the top right corner and select ‘Create new app’ from the dropdown&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/heroku_dashboard.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next step, enter a name for the app and click ‘Create app’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/heroku_create_new_app.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the app is successfully created, you will be taken to the app management screen&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/heroku_app_management.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This page allows you to deploy your app, view logs etc. among other operations. We will return to this page later on.&lt;/p&gt;

&lt;h3 id=&quot;setting-up--webhook&quot;&gt;Setting up  webhook&lt;/h3&gt;

&lt;p&gt;A webhook is an HTTP push API, which is used to deliver data to other applications in real-time. This is an improvement over typical HTTP push APIs since there is no need for frequent pushing to emulate the real-time feel. The Telegram bot API provides inbuilt methods to set up a webhook.
To set up the webhook open the python script where you have been writing the bot logic and append the following code in the main function only. The rest of the file remains as it is.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# all code before the main function stays as it is
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# setting to appropriate values
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;YOUR ACCESS TOKEN&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;APPNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HEROKU APP NAME&quot;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# set PORT to be used with Heroku
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# set up updater
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set up dispatcher
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# a print message to log successful initiation of the bot
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# this is for self
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bot started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# ConversationHandler
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# add conversation handler to dispatcher
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# starting webhook and setting it up with heroku app
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;url_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;updater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setWebhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;https://{}.herokuapp.com/{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# start the bot
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# updater.start_polling()
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# run the bot until pressed ctrl+c
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# updater.idle()
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;explaining-the-appended-code&quot;&gt;Explaining the appended code&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set the name of the app that you created in Heroku in the last section to the APPNAME variable&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start a webhook by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;updater.start_webhook()&lt;/code&gt; method and set the arguments to the values as shown in the example&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set the webhook by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;updater.set.Webhook()&lt;/code&gt; method and pass the URL of the Heroku app as shown in the example&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comment out the &lt;code class=&quot;highlighter-rouge&quot;&gt;updater.start_polling()&lt;/code&gt; method call. This is no longer required since webhook has been set. Also comment out &lt;code class=&quot;highlighter-rouge&quot;&gt;updater.idle()&lt;/code&gt; method call.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pushing-the-code-to-github-repository&quot;&gt;Pushing the code to Github repository&lt;/h3&gt;
&lt;p&gt;We are now ready to push our code to the Github repo. But first three additional files need to be created.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;requirements.txt&lt;/em&gt;: This file lists all the python packages that will be installed by Heroku in its environment. We have been already working within a virtual environment, and to create this file just type the following command from the terminal
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Procfile&lt;/em&gt;: All Heroku apps include a Procfile. The Procfile specifies the commands that are to be executed by the app on start up. It typically follows &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;process type&amp;gt;: &amp;lt;command&amp;gt;&lt;/code&gt;. Create the Procfile by running &lt;code class=&quot;highlighter-rouge&quot;&gt;touch Procfile&lt;/code&gt;, open it and add &lt;code class=&quot;highlighter-rouge&quot;&gt;web: python telegram_bot.py&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;.gitignore&lt;/em&gt;: This file maintains a list of all the files that do not need to be pushed to the Github repo. Typically this will contain all local environment files. Since we have been using a virtualenv named venv our file should list
&lt;code class=&quot;highlighter-rouge&quot;&gt;venv/&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.venv&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;venv.bak&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once these three files have been created, issued these commands from your terminal&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add.
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first commit&quot;&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the files in your local git repo will be now available in your remote Github repository.&lt;/p&gt;

&lt;h3 id=&quot;deploying-the-app-on-heroku&quot;&gt;Deploying the app on Heroku&lt;/h3&gt;
&lt;p&gt;Now return to your Heroku app page. Under the ‘&lt;strong&gt;Deploy&lt;/strong&gt;’ tab, three deployment methods will be listed. We will select the &lt;strong&gt;Github method&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Give the necessary permissions to Heroku to access your Github profile. Once the authorization has been set up, search for the name of your repository from the search bar and click on ‘&lt;strong&gt;Connect&lt;/strong&gt;’.&lt;/p&gt;

&lt;p&gt;Once the repository has been connected to the Heroku app, click on ‘&lt;strong&gt;Deploy branch&lt;/strong&gt;’ under the ‘&lt;strong&gt;Manual deploy&lt;/strong&gt;’ section, pointing to the ‘&lt;strong&gt;main&lt;/strong&gt;’ branch. The app will now build itself and if all the steps are followed correctly, your bot will be hosted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; that visiting your app URL will return a ‘&lt;strong&gt;404: page not found&lt;/strong&gt;’ error but that is alright since the script does not necessarily return anything. If problems are encountered while starting the app, visiting the URL will display the error message.&lt;/p&gt;

&lt;p&gt;So, that’s it for this tutorial. Happy coding!&lt;/p&gt;</content><author><name></name></author><category term="chatbot," /><category term="python" /><summary type="html">Telegram bots are third-party applications that run inside the application. Users can interact with bots by sending them messages, commands and inline requests. Contextual chatbots are a category bots that communicate only through inline requests. They are contextual since they maintain a context and the users can only navigate the pre-defined context. These are especially useful in providing customer service. In this post, we will look at how to design such bots in Telegram using Python.</summary></entry></feed>